---
layout: post
title:  "Python2.7 from source"
date:   2016-04-11 21:11:19 +0200
categories: python science coding set-up
---

#Building python2.7 from source

##intro


In the following I will describe my scientific python set-up.
I'm currently working with *Linux Mint 17*.
This OS is shipped with Python 2.7.6; yet I like the additional
 features
 of *Python 2.7.11* (once I updated my own programs I will shift to Python 3) and
 thus, this guide will be about the set-up of this very version.

##pre-requisites


So lets get started; we'll begin with installing compiling Python 2.7.11, which
 requires a bunch of pre-requisites.
For Linux Mint (which basically is a less annoying version of Ubuntu 14.04),
 we require:

{% highlight bash %}
sudo apt-get install autotools-dev blt-dev bzip2 dpkg-dev g++-multilib gcc-multilib \
                     libbluetooth-dev libbz2-dev libexpat1-dev libffi-dev libffi6 \
                     libffi6-dbg libgdbm-dev libgpm2 libncursesw5-dev libreadline-dev \
                     libsqlite3-dev libssl-dev libtinfo-dev mime-support net-tools \
                     netbase python-crypto python-mox3 python-pil python-ply quilt \
                     tk-dev zlib1g-dev
{% endhighlight %}

##download and compile python

Personally, I like to keep source code organised in `$HOME/.Source`, so that's
 where we'll start. Here is a the install script which installs Python into
 my `$HOME/.local` folder.

{% highlight bash %}
LOC=$HOME/.local
SOURCED=$HOME/.Source
PVERSION=2.7.11

cd $SOURCED
wget https://www.python.org/ftp/python/${PVERSION}/Python-${PVERSION}.tar.xz
tar xfz Python-${PVERSION}.tar.xz
cd Python-${PVERSION}
./configure --prefix=$LOC --enable-ipv6 --enable-unicode=ucs4

make -s -j4 |& tee compile.log
make install |& tee install.log
{% endhighlight %}

##bootstrapping


Now we need to bootstrap and update pip (and setup-tools) and prepare the
 virtual environment.

{% highlight bash %}
cd $LOC
bin/python -m ensurepip --user --upgrade
bin/pip install -U pip setuptools
bin/pip install -U --user virtualenv
bin/pip install -U --user virtualenvwrapper
bin/pip install --user cython
{% endhighlight %}


##setting up the virtual environment


As you can see, in my
 [.bashrc](https://github.com/jdcapa/bashrc.d/blob/main/05.ENV_PYTHON),
 I added the following:

{% highlight bash %}
# <.bashrc file content>
if [ -e $HOME/.virtualenvs ]; then
    export WORKON_HOME=$HOME/.virtualenvs
    source ${PYTHON_LOC}/bin/virtualenvwrapper.sh
    export PROJECT_HOME=$HOME/.devel
fi
{% endhighlight %}

This ensures that whenever my bash is sourced, I'm in my local Python
 environment.
The virtualenv programme also allows you to create new temporary environments
 for your personal enjoyment.

The command `python --version` should now return 'Python 2.7.11'.
Make sure you reload your `.bashrc`

*-jdcapa*
